/**
 * sms-client
 * API for sms-send functions
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.0.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "SmsSendResponse.h"

namespace com {
namespace nvt {
namespace api {
namespace client {
namespace model {




SmsSendResponse::SmsSendResponse()
{
    m_Success = false;
    m_SuccessIsSet = false;
    m_ErrorMessage = utility::conversions::to_string_t("");
    m_ErrorMessageIsSet = false;
}

SmsSendResponse::~SmsSendResponse()
{
}

void SmsSendResponse::validate()
{
    // TODO: implement validation
}

web::json::value SmsSendResponse::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_SuccessIsSet)
    {
        val[utility::conversions::to_string_t("success")] = ModelBase::toJson(m_Success);
    }
    if(m_ErrorMessageIsSet)
    {
        val[utility::conversions::to_string_t("errorMessage")] = ModelBase::toJson(m_ErrorMessage);
    }

    return val;
}

bool SmsSendResponse::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("success")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("success"));
        if(!fieldValue.is_null())
        {
            bool refVal_success;
            ok &= ModelBase::fromJson(fieldValue, refVal_success);
            setSuccess(refVal_success);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("errorMessage")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("errorMessage"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_errorMessage;
            ok &= ModelBase::fromJson(fieldValue, refVal_errorMessage);
            setErrorMessage(refVal_errorMessage);
        }
    }
    return ok;
}

void SmsSendResponse::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_SuccessIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("success"), m_Success));
    }
    if(m_ErrorMessageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("errorMessage"), m_ErrorMessage));
    }
}

bool SmsSendResponse::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("success")))
    {
        bool refVal_success;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("success")), refVal_success );
        setSuccess(refVal_success);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("errorMessage")))
    {
        utility::string_t refVal_errorMessage;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("errorMessage")), refVal_errorMessage );
        setErrorMessage(refVal_errorMessage);
    }
    return ok;
}

bool SmsSendResponse::isSuccess() const
{
    return m_Success;
}

void SmsSendResponse::setSuccess(bool value)
{
    m_Success = value;
    m_SuccessIsSet = true;
}

bool SmsSendResponse::successIsSet() const
{
    return m_SuccessIsSet;
}

void SmsSendResponse::unsetSuccess()
{
    m_SuccessIsSet = false;
}
utility::string_t SmsSendResponse::getErrorMessage() const
{
    return m_ErrorMessage;
}

void SmsSendResponse::setErrorMessage(const utility::string_t& value)
{
    m_ErrorMessage = value;
    m_ErrorMessageIsSet = true;
}

bool SmsSendResponse::errorMessageIsSet() const
{
    return m_ErrorMessageIsSet;
}

void SmsSendResponse::unsetErrorMessage()
{
    m_ErrorMessageIsSet = false;
}
}
}
}
}
}


